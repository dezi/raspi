##################################################################
#
# Build local source addons from scratch, loads latest sources from web.
#
# Dennis Zierahn
#

#
# TODO:
# dyndns
# wget http://downloads.sourceforge.net/project/ddclient/ddclient/ddclient-3.8.1/ddclient-3.8.1.tar.gz
# sudo apt-get install libio-socket-ssl-perl
#

shine_version				= git
libnut_version				= git
celt_version				= git
libcec_version				= git
noip_version				= 2.1.9-1
afpfs-ng_version			= 0.8.2
xz_version					= 5.1.2alpha
tar_version					= 1.26
sed_version					= 4.2.1
wget_version				= 1.14
gmp_version					= 5.0.5
yasm_version 				= 1.2.0
cmake_version				= 2.8.10.2
gperf_version 				= 3.0.4
expat_version 				= 2.1.0
zlib_version 				= 1.2.7
bzip2_version 				= 1.0.6
libiconv_version 			= 1.14
nettle_version				= 2.5
gnutls_version				= 3.0.22
pkg-config_version			= 0.28
e2fsprogs_version			= git
libMXF_version				= 1.0.0

jpeg_version				= v9
sdl_version					= 1.2.15
alsa_version 				= 1.0.25
freetype_version 			= 2.4.11
libxml2_version 			= git
fontconfig_version 			= git
libcddb_version				= 1.3.2
taglib_version				= 1.8
libdvdcss_version 			= 1.2.12
fribidi_version 			= 0.19.5
rtmpdump_version 			= git

libcdio_version				= 0.90
libgsm_version 				= 1.0.13-4
libmad_version 				= 0.15.1b
libass_version 				= 0.10.1
libogg_version 				= 1.3.0
libvorbis_version 			= 1.3.3
libtheora_version 			= 1.1.1
libbluray_version 			= git
libvpx_version 				= git
libaacplus_version 			= git
libcaca_version 			= git
libilbc_version 			= git

opus_version				= 1.0.2
openjpeg_version			= 1.5.1
x264_version 				= git
lame_version 				= 3.99.5
faac_version 				= 1.28
faad2_version 				= 2.7
opencore-amr_version 		= 0.1.3
vo-amrwbenc_version			= 0.1.2
vo-aacenc_version			= 0.1.2
fdk-aac_version				= git
xvidcore_version			= 1.3.2
orc_version 				= 0.4.16
schroedinger_version 		= 1.0.11
xavs_version				= svn
utvideo_version				= 11.1.1
speex_version 				= 1.2rc1
frei0r_version				= 1.3

cd-discid_version			= git
libcdio-paranoia_version	= 10.2+0.90
abcde_version				= 2.5.4
atomicparsley_version		= git
mp4v2_version 				= svn
gpac_version 				= svn
v8_version 					= git

#####################################################################

shine = shine-$(shine_version)
libnut = libnut-$(libnut_version)
celt = celt-$(celt_version)
libcec = libcec-$(libcec_version)
noip = noip-$(noip_version)
afpfs-ng = afpfs-ng-$(afpfs-ng_version)
xz = xz-$(xz_version)
tar = tar-$(tar_version)
sed = sed-$(sed_version)
wget = wget-$(wget_version)
cd-discid = cd-discid-$(cd-discid_version)
taglib = taglib-$(taglib_version)
libcddb = libcddb-$(libcddb_version)
libcdio = libcdio-$(libcdio_version)
libcdio-paranoia = libcdio-paranoia-$(libcdio-paranoia_version)
libiconv = libiconv-$(libiconv_version)
cmake = cmake-$(cmake_version)
jpeg = jpegsrc.$(jpeg_version)
sdl = SDL-$(sdl_version)
frei0r = frei0r-$(frei0r_version)
fdk-aac = fdk-aac-$(fdk-aac_version)
gnutls = gnutls-$(gnutls_version)
pkg-config = pkg-config-$(pkg-config_version)
nettle = nettle-$(nettle_version)
gmp = gmp-$(gmp_version)
vo-amrwbenc = vo-amrwbenc-$(vo-amrwbenc_version)
vo-aacenc = vo-aacenc-$(vo-aacenc_version)
xvidcore = xvidcore-$(xvidcore_version)
xavs = xavs-$(xavs_version)
utvideo = utvideo-$(utvideo_version)
opus = opus-$(opus_version)
openjpeg = openjpeg-$(openjpeg_version)
speex = speex-$(speex_version)
expat = expat-$(expat_version)
gperf = gperf-$(gperf_version)
libxml2 = libxml2-$(libxml2_version)
fontconfig = fontconfig-$(fontconfig_version)
fribidi = fribidi-$(fribidi_version)
freetype = freetype-$(freetype_version)
orc = orc-$(orc_version)
schroedinger = schroedinger-$(schroedinger_version)
bzip2 = bzip2-$(bzip2_version)
zlib = zlib-$(zlib_version)
yasm = yasm-$(yasm_version)
lame = lame-$(lame_version)
faad2 = faad2-$(faad2_version)
faac = faac-$(faac_version)
opencore-amr = opencore-amr-$(opencore-amr_version)
alsa = alsa-lib-$(alsa_version)
libgsm = libgsm-$(libgsm_version)
libass = libass-$(libass_version)
libmad = libmad-$(libmad_version)
libogg = libogg-$(libogg_version)
libvorbis = libvorbis-$(libvorbis_version)
libtheora = libtheora-$(libtheora_version)
libdvdcss = libdvdcss-$(libdvdcss_version)
libaacplus = libaacplus-$(libaacplus_version)
gpac = gpac-$(gpac_version)
mp4v2 = mp4v2-$(mp4v2_version)
rtmpdump = rtmpdump-$(rtmpdump_version)
libvpx = libvpx-$(libvpx_version)
x264 = x264-$(x264_version)
libcaca = libcaca-$(libcaca_version)
libilbc = libilbc-$(libilbc_version)
libbluray = libbluray-$(libbluray_version)
abcde = abcde-$(abcde_version)
atomicparsley = atomicparsley-$(atomicparsley_version)
v8 = v8-$(v8_version)
e2fsprogs = e2fsprogs-$(e2fsprogs_version)
libMXF = libMXF-src-$(libMXF_version)

#####################################################################
#
# Setup target architecture and host system.
#

xtarget=$(shell if [ -f /usr/bin/raspi-config ]; then echo -n "xberry"; else echo -n "xodroid"; fi)

######################################################################
#
# Build section.
#

all: tools helpers codecs utilities mxf

packs: afpfs-ng-pack

local-doit: ./local ./download
	cd ./local; make all

tools: yasm cmake gperf gmp nettle gnutls expat zlib bzip2

helpers: sdl alsa freetype fontconfig taglib libcddb libdvdcss fribidi rtmpdump libcec

codecs: \
	celt shine libnut libcdio libgsm libmad libass libxml2 \
	libogg libvorbis libtheora libbluray libvpx \
	libaacplus libcaca libilbc \
	opus openjpeg fdk-aac xvidcore x264 \
	lame faac faad2 opencore-amr \
	vo-amrwbenc vo-aacenc \
	orc schroedinger xavs utvideo speex \
	frei0r \

utilities: cd-discid libcdio-paranoia abcde atomicparsley mp4v2 gpac

mxf: e2fsprogs libMXF

special: v8

#####################################################################
#
# Local setup
#

./local:
	mkdir ./local
	ln -s ../Makefile.local ./local/Makefile

./download:
	mkdir ./download

#####################################################################
#
# OSX Darwin bootstrapping setup
#

darwin:
	if ! [ -f "/usr/bin/xz" ]; then \
 		make xz tar sed gmp nettle gnutls wget pkg-config; \
	fi

#####################################################################
#
# e2fsprogs => libuuid => libMXF
#

$(e2fsprogs): 
	git clone git://git.kernel.org/pub/scm/fs/ext2/e2fsprogs.git $(e2fsprogs)
	tar -cvzf $(e2fsprogs).tar.gz $(e2fsprogs)
	mv $(e2fsprogs).tar.gz ../download

$(e2fsprogs)/dezi.done:
	cd $(e2fsprogs); \
	./configure --prefix=/usr/local; \
	cd lib/uuid; \
	make; \
	sudo make install; \
	cd ../..; \
	touch dezi.done

e2fsprogs: $(e2fsprogs) $(e2fsprogs)/dezi.done

#####################################################################
#
# libMXF => writeavidmxf
#

$(libMXF): 
	wget http://sourceforge.net/projects/ingex/files/1.0.0/libMXF/$(libMXF).tgz
	tar -xvzf $(libMXF).tgz 
	mv $(libMXF).tgz ../download

$(libMXF)/dezi.done:
	mkdir -p $(libMXF)/libMXF/lib/include/uuid; \
	cp $(e2fsprogs)/lib/uuid/uuid.h $(libMXF)/libMXF/lib/include/uuid/uuid.h; \
	cp ../patches/writeavidmxf-main.c $(libMXF)/libMXF/examples/writeavidmxf/main.c; \
	cd $(libMXF); \
	sed -i 's/-Werror//g' libMXF/vars.mk; \
	sed -i 's/-Werror//g' libMXF++/vars.mk; \
	make; \
	sudo make install; \

libMXF: $(libMXF) $(libMXF)/dezi.done

#####################################################################
#
# xz
#

$(xz): 
	curl http://tukaani.org/xz/$(xz).tar.gz -o $(xz).tar.gz
	tar -xvzf $(xz).tar.gz 
	mv $(xz).tar.gz ../download

$(xz)/dezi.done:
	cd $(xz); \
	./configure; \
	make; \
	sudo make install; \
	touch dezi.done

xz: $(xz) $(xz)/dezi.done

##################################################################
#
# celt
#

$(celt):
	git clone --depth 5 git://git.xiph.org/celt.git $(celt)
	tar -cvzf $(celt).tar.gz $(celt)
	mv $(celt).tar.gz ../download

$(celt)/dezi.done: celt-git
	cd $(celt); \
	./autogen.sh; \
	./configure --prefix=/usr/local || exit; \
	make || exit; \
	sudo make install; \
	touch dezi.done

celt: celt-git/dezi.done

##################################################################
#
# shine
#

$(shine):
	git clone --depth 5 https://github.com/savonet/shine.git $(shine)
	tar -cvzf $(shine).tar.gz $(shine)
	mv $(shine).tar.gz ../download

$(shine)/dezi.done: shine-git
	cd $(shine); \
	./bootstrap; \
	./configure; \
	make || exit; \
	sudo make install; \
	touch dezi.done

shine: shine-git/dezi.done

##################################################################
#
# libnut
#

$(libnut):
	git clone --depth 5 https://github.com/Distrotech/libnut $(libnut)
	tar -cvzf $(libnut).tar.gz $(libnut)
	mv $(libnut).tar.gz ../download

$(libnut)/dezi.done: libnut-git
	cd $(libnut); \
	echo "prefix = /usr/local" | tee -a Makefile; \
	make || exit; \
	sudo make install; \
	touch dezi.done

libnut: libnut-git/dezi.done

##################################################################
#
# libcec
#

$(libcec):
	git clone --depth 5 https://github.com/Pulse-Eight/libcec.git $(libcec)
	tar -cvzf $(libcec).tar.gz $(libcec)
	mv $(libcec).tar.gz ../download

$(libcec)/dezi.done: libcec-git
	cd $(libcec); \
	if [ -f /usr/bin/raspi-config ] ; \
	then \
		export LDFLAGS="-L/opt/vc/lib"; \
		./bootstrap || exit; \
		./configure --prefix=/usr/local --enable-rpi --with-rpi-include-path="/opt/vc/include" --with-rpi-lib-path="/opt/vc/lib/libbcm_host.so" || exit; \
	else \
		./bootstrap || exit; \
		./configure --prefix=/usr/local || exit; \
	fi;	\
	make || exit; \
	sudo make install; \
	touch dezi.done

libcec: libcec-git/dezi.done

#####################################################################
#
# noip
#

$(noip): 
	curl https://www.noip.com/client/linux/noip-duc-linux.tar.gz -o $(noip).tar.gz
	tar -xvzf $(noip).tar.gz
	rm -rf ._$(noip)
	mv $(noip).tar.gz ../download

$(noip)/dezi.done:
	cd $(noip); \
	make; \
	sudo make install; \
	touch dezi.done

noip: $(noip) $(noip)/dezi.done

#####################################################################
#
# tar
#

$(tar): 
	curl http://ftp.gnu.org/gnu/tar/$(tar).tar.gz -o $(tar).tar.gz
	tar -xvzf $(tar).tar.gz
	mv $(tar).tar.gz ../download

$(tar)/dezi.done:
	cd $(tar); \
	./configure; \
	make; \
	sudo make install; \
	touch dezi.done

tar: $(tar) $(tar)/dezi.done

#####################################################################
#
# sed
#

$(sed): 
	curl ftp://ftp.gnu.org/gnu/sed/$(sed).tar.gz -o $(sed).tar.gz
	tar -xvzf $(sed).tar.gz
	mv $(sed).tar.gz ../download

$(sed)/dezi.done:
	cd $(sed); \
	./configure; \
	make; \
	sudo make install; \
	touch dezi.done

sed: $(sed) $(sed)/dezi.done

#####################################################################
#
# wget
#

$(wget): 
	curl http://ftp.gnu.org/gnu/wget/$(wget).tar.gz -o $(wget).tar.gz
	tar -xvzf $(wget).tar.gz
	mv $(wget).tar.gz ../download

$(wget)/dezi.done:
	cd $(wget); \
	./configure; \
	make; \
	sudo make install; \
	touch dezi.done

wget: $(wget) $(wget)/dezi.done

#####################################################################
#
# pkg-config
#

$(pkg-config): 
	wget http://pkgconfig.freedesktop.org/releases/$(pkg-config).tar.gz
	tar -xvzf $(pkg-config).tar.gz
	mv $(pkg-config).tar.gz ../download

$(pkg-config)/dezi.done:
	cd $(pkg-config); \
	./configure --with-internal-glib; \
	make; \
	sudo make install; \
	touch dezi.done

pkg-config: $(pkg-config) $(pkg-config)/dezi.done

#####################################################################
#
# afps-ng
#

$(afpfs-ng): 
	git clone git://github.com/dezi/afpfs-ng-fork.git $(afpfs-ng)
	tar -cvjf $(afpfs-ng).tar.bz2 $(afpfs-ng)
	mv $(afpfs-ng).tar.bz2 ../download

$(afpfs-ng)/dezi.done:
	cd $(afpfs-ng); \
	autoreconf -fiv; \
	./configure; \
	make; \
	sudo make install; \
	touch dezi.done

$(afpfs-ng)/dezi.$(xtarget):
	cd $(afpfs-ng); \
	cp ../../descriptions/afpfs-ng.txt description-pak; \
	mkdir -p doc-pak; \
	cp ChangeLog doc-pak/CHANGELOG; \
	find . -regex "./[A-Z0-9-][A-Z0-9-]+\.*[a-z0-9]*" -type f -exec cp {} doc-pak \;; \
	mkdir -p debian; touch debian/control; rm debian/substvars; \
	dpkg-shlibdeps -e/usr/local/bin/afpfsd -e/usr/local/bin/afpcmd; \
	sed -i 's/shlibs:Depends=//' debian/substvars; \
	sudo checkinstall \
		--install=no \
		--maintainer dezi@kappa-mm.de \
		--pakdir=../../packages \
		--pkggroup=$(xtarget) \
		--pkgname=$(xtarget)-afpfs-ng \
		--pkgaltsource=git://github.com/dezi/afpfs-ng-fork.git \
		--requires='`cat debian/substvars`' \
		make install || exit; \
	touch dezi.$(xtarget)

afpfs-ng: $(afpfs-ng) $(afpfs-ng)/dezi.done

afpfs-ng-pack: afpfs-ng $(afpfs-ng)/dezi.$(xtarget)

#####################################################################
#
# gmp => nettle
#

$(gmp): 
	curl ftp://ftp.gnu.org/gnu/gmp/$(gmp).tar.bz2 -o $(gmp).tar.bz2
	tar -xvjf $(gmp).tar.bz2
	mv $(gmp).tar.bz2 ../download

$(gmp)/dezi.done:
	cd $(gmp); \
	./configure; \
	make; \
	sudo make install; \
	touch dezi.done

gmp: $(gmp) $(gmp)/dezi.done

#####################################################################
#
# yasm
#

$(yasm): 
	wget http://www.tortall.net/projects/yasm/releases/$(yasm).tar.gz
	tar -xvzf $(yasm).tar.gz 
	mv -f $(yasm).tar.gz ../download

$(yasm)/dezi.done:
	cd $(yasm); \
	./configure; \
	make; \
	sudo make install; \
	touch dezi.done

yasm: $(yasm) $(yasm)/dezi.done

#####################################################################
#
# cmake
#

$(cmake): 
	wget http://www.cmake.org/files/v2.8/$(cmake).tar.gz
	tar -xvzf $(cmake).tar.gz
	mv -f $(cmake).tar.gz ../download

$(cmake)/dezi.done:
	cd $(cmake); \
	./configure; \
	make; \
	sudo make install; \
	touch dezi.done

cmake: $(cmake) $(cmake)/dezi.done

#####################################################################
#
# gperf
#

$(gperf): 
	wget http://ftp.gnu.org/pub/gnu/gperf/$(gperf).tar.gz
	tar -xvzf $(gperf).tar.gz 
	mv -f $(gperf).tar.gz ../download

$(gperf)/dezi.done:
	cd $(gperf); \
	./configure; \
	make; \
	sudo make install; \
	touch dezi.done

gperf: $(gperf) $(gperf)/dezi.done

#####################################################################
#
# expat => fontconfig
#

$(expat): 
	wget http://heanet.dl.sourceforge.net/project/expat/expat/$(expat_version)/$(expat).tar.gz
	tar -xvzf $(expat).tar.gz 
	mv -f $(expat).tar.gz ../download

$(expat)/dezi.done:
	cd $(expat); \
	./configure; \
	make; \
	sudo make install; \
	touch dezi.done

expat: $(expat) $(expat)/dezi.done

#####################################################################
#
# zlib
#

$(zlib): 
	wget http://zlib.net/$(zlib).tar.gz
	tar -xvzf $(zlib).tar.gz 
	mv -f $(zlib).tar.gz ../download

$(zlib)/dezi.done:
	cd $(zlib); \
	./configure; \
	sed -i 's/CC=gcc/CC=gcc -fPIC/g' Makefile; \
	make; \
	sudo make install; \
	touch dezi.done

zlib: $(zlib) $(zlib)/dezi.done

#####################################################################
#
# bzip2
#

$(bzip2): 
	wget http://ffmpeg.zeranoe.com/builds/source/external_libraries/bzip2-$(bzip2_version).tar.xz
	tar -xvJf $(bzip2).tar.xz
	mv -f $(bzip2).tar.xz ../download

$(bzip2)/dezi.done:
	cd $(bzip2); \
	sed -i 's/CC=gcc/CC=gcc -fPIC/g' Makefile; \
	make; \
	sudo make install; \
	make -f Makefile-libbz2_so; \
	sudo mv libbz2.so.* /usr/local/lib; \
	touch dezi.done

bzip2: $(bzip2) $(bzip2)/dezi.done

#####################################################################
#
# libiconv
#

$(libiconv): 
	wget http://ftp.gnu.org/pub/gnu/libiconv/$(libiconv).tar.gz
	tar -xvzf $(libiconv).tar.gz
	mv -f $(libiconv).tar.gz ../download

$(libiconv)/dezi.done:
	cd $(libiconv); \
	./configure --enable-static; \
	make; \
	sudo make install; \
	touch dezi.done

libiconv: $(libiconv) $(libiconv)/dezi.done

#####################################################################
#
# nettle => gnutls
#

$(nettle): 
	curl http://www.lysator.liu.se/~nisse/archive/$(nettle).tar.gz -o $(nettle).tar.gz
	tar -xvzf $(nettle).tar.gz
	mv -f $(nettle).tar.gz ../download

$(nettle)/dezi.done:
	cd $(nettle); \
	./configure; \
	make; \
	sudo make install; \
	touch dezi.done

nettle: $(nettle) $(nettle)/dezi.done

#####################################################################
#
# gnutls
#

$(gnutls): 
	curl ftp://ftp.gnu.org/gnu/gnutls/$(gnutls).tar.xz -o $(gnutls).tar.xz
	tar -xvJf $(gnutls).tar.xz
	mv -f $(gnutls).tar.xz ../download

$(gnutls)/dezi.done:
	cd $(gnutls); \
	sed -i "s/^void \*_gnutls_file_mutex;/void *_gnutls_file_mutex = 0;/" lib/verify-tofu.c; \
	./configure --enable-static --enable-shared --with-included-libtasn1; \
	make; \
	sudo make install; \
	touch dezi.done

gnutls: $(gnutls) $(gnutls)/dezi.done

#####################################################################
#
# jpeg
#

$(jpeg): 
	curl http://www.ijg.org/files/$(jpeg).tar.gz -o $(jpeg).tar.gz
	rm -rf jpeg-9
	tar -xvzf $(jpeg).tar.gz
	mv jpeg-9 $(jpeg)
	mv -f $(jpeg).tar.gz ../download

$(jpeg)/dezi.done:
	cd $(jpeg); \
	./configure; \
	make; \
	sudo make install; \
	touch dezi.done

jpeg: $(jpeg) $(jpeg)/dezi.done

#####################################################################
#
# sdl
#

$(sdl): 
	wget http://www.libsdl.org/release/$(sdl).tar.gz
	tar -xvzf $(sdl).tar.gz
	mv -f $(sdl).tar.gz ../download

$(sdl)/dezi.done:
	cd $(sdl); \
	./configure; \
	make; \
	sudo make install; \
	touch dezi.done

sdl: $(sdl) $(sdl)/dezi.done

#####################################################################
#
# alsa
#

$(alsa): 
	wget http://mirrors.zerg.biz/alsa/lib/$(alsa).tar.bz2
	tar -xvjf $(alsa).tar.bz2 
	mv -f $(alsa).tar.bz2 ../download

$(alsa)/dezi.done:
	cd $(alsa); \
	./configure --prefix=/usr/local --enable-static=yes --enable-shared=no; \
	make; \
	sudo make install; \
	make clean; \
	./configure --prefix=/usr/local --enable-static=no --enable-shared=yes; \
	make; \
	sudo make install; \
	touch dezi.done

alsa: $(alsa) $(alsa)/dezi.done

#####################################################################
#
# freetype => libass
#

$(freetype): 
	wget http://ignum.dl.sourceforge.net/project/freetype/freetype2/$(freetype_version)/$(freetype).tar.bz2
	tar -xvjf $(freetype).tar.bz2 
	mv -f $(freetype).tar.bz2 ../download

$(freetype)/dezi.done:
	cd $(freetype); \
	./configure --enable-static --enable-shared; \
	make; \
	sudo make install; \
	touch dezi.done

freetype: $(freetype) $(freetype)/dezi.done

#####################################################################
#
# libxml2 => libvpx
#

$(libxml2): 
	git clone git://git.gnome.org/libxml2 $(libxml2)
	tar -cvzf $(libxml2).tar.gz $(libxml2)
	mv $(libxml2).tar.gz ../download

$(libxml2)/dezi.done:
	cd $(libxml2); \
	export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig"; \
	./autogen.sh; \
	./configure --enable-shared --enable-static; \
	make; \
	sudo make install; \
	touch dezi.done

libxml2: $(libxml2) $(libxml2)/dezi.done

#####################################################################
#
# fontconfig => libass
#

$(fontconfig): 
	git clone http://cgit.freedesktop.org/fontconfig $(fontconfig)
	tar -cvzf $(fontconfig).tar.gz $(fontconfig)
	mv $(fontconfig).tar.gz ../download

$(fontconfig)/dezi.done:
	cd $(fontconfig); \
	export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig"; \
	./autogen.sh; \
	./configure -disable-docs; \
	make; \
	sudo make install; \
	touch dezi.done

fontconfig: $(fontconfig) $(fontconfig)/dezi.done

#####################################################################
#
# taglib
#

$(taglib): 
	wget http://taglib.github.com/releases/$(taglib).tar.gz
	tar -xvzf $(taglib).tar.gz
	mv -f $(taglib).tar.gz ../download

$(taglib)/dezi.done:
	cd $(taglib); \
	cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DENABLE_STATIC=1 .; \
	make || exit; \
	sudo make install; \
	touch dezi.done

taglib: $(taglib) $(taglib)/dezi.done

#####################################################################
#
# libcddb
#

$(libcddb): 
	wget http://prdownloads.sourceforge.net/libcddb/$(libcddb).tar.bz2
	tar -xvjf $(libcddb).tar.bz2
	mv -f $(libcddb).tar.bz2 ../download

$(libcddb)/dezi.done:
	cd $(libcddb); \
	./configure; \
	make; \
	sudo make install; \
	touch dezi.done

libcddb: $(libcddb) $(libcddb)/dezi.done

#####################################################################
#
# libdvdcss
#

$(libdvdcss): 
	wget http://www.videolan.org/pub/libdvdcss/$(libdvdcss_version)/$(libdvdcss).tar.bz2
	tar -xvjpf $(libdvdcss).tar.bz2 
	mv -f $(libdvdcss).tar.bz2 ../download

$(libdvdcss)/dezi.done:
	cd $(libdvdcss); \
	./configure; \
	make; \
	sudo make install; \
	touch dezi.done
	
libdvdcss: $(libdvdcss) $(libdvdcss)/dezi.done

#####################################################################
#
# fribidi => libass
#

$(fribidi): 
	wget http://fribidi.org/download/$(fribidi).tar.bz2
	tar -xvjf $(fribidi).tar.bz2 
	mv -f $(fribidi).tar.bz2 ../download

$(fribidi)/dezi.done:
	cd $(fribidi); \
	./configure --enable-static --enable-shared; \
	make; \
	sudo make install; \
	touch dezi.done

fribidi: $(fribidi) $(fribidi)/dezi.done

#####################################################################
#
# rtmpdump
#

$(rtmpdump): 
	git clone git://git.ffmpeg.org/rtmpdump $(rtmpdump)
	tar -cvzf $(rtmpdump).tar.gz $(rtmpdump)
	mv -f $(rtmpdump).tar.gz ../download

$(rtmpdump)/dezi.done:
	cd $(rtmpdump); \
	sed -i 's/CRYPTO=OPENSSL/#CRYPTO=OPENSSL/g' Makefile; \
	sed -i 's/#CRYPTO=GNUTLS/CRYPTO=GNUTLS/g' Makefile; \
	sed -i 's/CRYPTO=OPENSSL/#CRYPTO=OPENSSL/g' librtmp/Makefile; \
	sed -i 's/#CRYPTO=GNUTLS/CRYPTO=GNUTLS/g' librtmp/Makefile; \
	MYSYS=`uname`; \
	if test "$$MYSYS" = "Darwin"; then \
		make SYS=darwin || exit; \
		sudo make SYS=darwin install; \
	else \
		make || exit; \
		sudo make install; \
	fi; \
	touch dezi.done

rtmpdump: $(rtmpdump) $(rtmpdump)/dezi.done

#####################################################################
#
# libcdio
#

$(libcdio): 
	wget http://ftp.gnu.org/gnu/libcdio/$(libcdio).tar.gz
	tar -xvzf $(libcdio).tar.gz
	mv -f $(libcdio).tar.gz ../download

$(libcdio)/dezi.done:
	cd $(libcdio); \
	./configure; \
	make; \
	sudo make install; \
	touch dezi.done

libcdio: $(libcdio) $(libcdio)/dezi.done

#####################################################################
#
# libgsm
#

$(libgsm): 
	wget http://ffmpeg.zeranoe.com/builds/source/external_libraries/$(libgsm).tar.xz
	tar -xvJf $(libgsm).tar.xz
	mv -f $(libgsm).tar.xz ../download

$(libgsm)/dezi.done:
	cd $(libgsm); \
	sed -i 's/install_root\t=/install_root\t= \/usr\/local/g' makefile; \
	sed -i 's/gsm_install_root)\/inc/gsm_install_root)\/include/g' makefile; \
	sed -i 's/-c -o2/-fpic -c -o2/g' makefile; \
	make; \
	sudo make install; \
	touch dezi.done

libgsm: $(libgsm) $(libgsm)/dezi.done

#####################################################################
#
# libmad
#

$(libmad): 
	wget  http://downloads.sourceforge.net/mad/$(libmad).tar.gz
	tar -xvzf $(libmad).tar.gz 
	mv -f $(libmad).tar.gz ../download

$(libmad)/dezi.done:
	cd $(libmad); \
	sed -i '/-fforce-mem/d' configure; \
	./configure; \
	make; \
	sudo make install; \
	touch dezi.done

libmad: $(libmad) $(libmad)/dezi.done

#####################################################################
#
# libass
#

$(libass): 
	wget http://libass.googlecode.com/files/$(libass).tar.xz
	tar -xvJf $(libass).tar.xz
	mv -f $(libass).tar.xz ../download

$(libass)/dezi.done:
	cd $(libass); \
	export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig"; \
	./configure; \
	make; \
	sudo make install; \
	touch dezi.done

libass: $(libass) $(libass)/dezi.done

#####################################################################
#
# libogg
#

$(libogg): 
	wget http://downloads.xiph.org/releases/ogg/$(libogg).tar.gz
	tar -xvzf $(libogg).tar.gz 
	mv -f $(libogg).tar.gz ../download 

$(libogg)/dezi.done:
	cd $(libogg); \
	./configure; \
	make; \
	sudo make install; \
	touch dezi.done

libogg: $(libogg) $(libogg)/dezi.done

#####################################################################
#
# libvorbis
#

$(libvorbis): 
	wget http://downloads.xiph.org/releases/vorbis/$(libvorbis).tar.gz
	tar -xvzf $(libvorbis).tar.gz 
	mv -f $(libvorbis).tar.gz ../download

$(libvorbis)/dezi.done:
	cd $(libvorbis); \
	./configure; \
	make; \
	sudo make install; \
	touch dezi.done

libvorbis: $(libvorbis) $(libvorbis)/dezi.done

#####################################################################
#
# libtheora
#

$(libtheora): 
	wget http://downloads.xiph.org/releases/theora/$(libtheora).tar.gz
	tar -xvzf $(libtheora).tar.gz 
	mv -f $(libtheora).tar.gz ../download

$(libtheora)/dezi.done:
	cd $(libtheora); \
	./configure; \
	make; \
	sudo make install; \
	touch dezi.done

libtheora: $(libtheora) $(libtheora)/dezi.done

#####################################################################
#
# libbluray
#

$(libbluray): 
	git clone git://git.videolan.org/libbluray.git $(libbluray)
	tar -cvzf $(libbluray).tar.gz $(libbluray)
	mv -f $(libbluray).tar.gz ../download

$(libbluray)/dezi.done: 
	cd $(libbluray); \
	./bootstrap; \
	./configure --enable-static --enable-shared; \
	make; \
	sudo make install; \
	touch dezi.done

libbluray: $(libbluray) $(libbluray)/dezi.done

#####################################################################
#
# libvpx
#

$(libvpx): 
	git clone http://git.chromium.org/webm/libvpx.git $(libvpx)
	tar -cvzf $(libvpx).tar.gz $(libvpx)
	mv -f $(libvpx).tar.gz ../download

$(libvpx)/dezi.done: 
	cd $(libvpx); \
	./configure --extra-cflags="-fPIC" --enable-vp8 --enable-vp9 --enable-static --disable-shared; \
	make -j4; \
	sudo make install; \
	./configure --extra-cflags="-fPIC" --enable-vp8 --enable-vp9 --enable-shared --disable-static; \
	make -j4; \
	sudo make install; \
	touch dezi.done

libvpx: $(libvpx) $(libvpx)/dezi.done

#####################################################################
#
# libaacplus
#

$(libaacplus): 
	git clone --depth 5 https://github.com/Distrotech/libaacplus.git $(libaacplus)
	tar -cvzf $(libaacplus).tar.gz $(libaacplus)
	mv $(libaacplus).tar.gz ../download

$(libaacplus)/dezi.done:
	cd $(libaacplus); \
	./autogen.sh --enable-shared --enable-static; \
	make; \
	sudo make install; \
	touch dezi.done
	
libaacplus: $(libaacplus) $(libaacplus)/dezi.done

#####################################################################
#
# libcaca
#

$(libcaca): 
	git clone git://git.zoy.org/libcaca.git $(libcaca)
	tar -cvzf $(libcaca).tar.gz $(libcaca)
	mv -f $(libcaca).tar.gz ../download

$(libcaca)/dezi.done: 
	cd $(libcaca); \
	./bootstrap; \
	./configure; \
	make; \
	sudo make install; \
	touch dezi.done

libcaca: $(libcaca) $(libcaca)/dezi.done

#####################################################################
#
# libilbc
#

$(libilbc): 
	git clone  https://github.com/dekkers/libilbc.git $(libilbc)
	tar -cvzf $(libilbc).tar.gz $(libilbc)
	mv -f $(libilbc).tar.gz ../download

$(libilbc)/dezi.done: 
	cd $(libilbc); \
	autoreconf -fiv || exit; \
	./configure || exit; \
	make || exit; \
	sudo make install; \
	touch dezi.done

libilbc: $(libilbc) $(libilbc)/dezi.done

#####################################################################
#
# opus
#

$(opus): 
	wget http://downloads.xiph.org/releases/opus/$(opus).tar.gz
	tar -xvzf $(opus).tar.gz 
	mv -f $(opus).tar.gz ../download

$(opus)/dezi.done:
	cd $(opus); \
	./configure; \
	make; \
	sudo make install; \
	touch dezi.done

opus: $(opus) $(opus)/dezi.done

#####################################################################
#
# openjpeg
#

$(openjpeg): 
	wget http://ffmpeg.zeranoe.com/builds/source/external_libraries/$(openjpeg).tar.xz
	tar -xvJf $(openjpeg).tar.xz 
	mv -f $(openjpeg).tar.xz ../download

$(openjpeg)/dezi.done:
	cd $(openjpeg); \
	./configure; \
	make; \
	sudo make install; \
	touch dezi.done

openjpeg: $(openjpeg) $(openjpeg)/dezi.done

#####################################################################
#
# x264
#

$(x264): 
	git clone git://git.videolan.org/x264 $(x264)
	tar -cvzf $(x264).tar.gz $(x264)
	mv -f $(x264).tar.gz ../download

$(x264)/dezi.done:
	cd $(x264); \
	./configure --enable-shared --enabled-static; \
	make; \
	sudo make install; \
	sudo make install-lib-dev; \
	sudo make install-lib-shared; \
	sudo make install-lib-static; \
	touch dezi.done

x264: $(x264) $(x264)/dezi.done

#####################################################################
#
# lame
#

$(lame): 
	wget http://sourceforge.net/projects/lame/files/lame/3.99/$(lame).tar.gz
	tar -xvzf $(lame).tar.gz 
	mv -f $(lame).tar.gz ../download

$(lame)/dezi.done:
	cd $(lame); \
	./configure; \
	make; \
	sudo make install; \
	touch dezi.done

lame: $(lame) $(lame)/dezi.done

#####################################################################
#
# faac
#

$(faac): 
	wget http://downloads.sourceforge.net/faac/$(faac).tar.gz
	wget http://www.linuxfromscratch.org/patches/blfs/svn/faac-$(faac_version)-glibc_fixes-1.patch
	tar -xvzf $(faac).tar.gz 
	mv -f $(faac).tar.gz ../download
	cd $(faac); \
	patch -p1 -i ../faac-$(faac_version)-glibc_fixes-1.patch; \
	cd ..;\
	mv -f faac-$(faac_version)-glibc_fixes-1.patch ../download

$(faac)/dezi.done:
	cd $(faac); \
	./configure; \
	make; \
	sudo make install; \
	touch dezi.done

faac: $(faac) $(faac)/dezi.done

#####################################################################
#
# faad2
#

$(faad2): 
	wget http://downloads.sourceforge.net/faac/$(faad2).tar.gz
	tar -xvzf $(faad2).tar.gz 
	mv -f $(faad2).tar.gz ../download

$(faad2)/dezi.done:
	cd $(faad2); \
	export CFLAGS="-fPIC"; \
	./configure; \
	make; \
	sudo make install; \
	touch dezi.done

faad2: $(faad2) $(faad2)/dezi.done

#####################################################################
#
# opencore-amr
#

$(opencore-amr): 
	wget http://sourceforge.net/projects/opencore-amr/files/opencore-amr/$(opencore-amr).tar.gz
	tar -xvzf $(opencore-amr).tar.gz 
	mv -f $(opencore-amr).tar.gz ../download

$(opencore-amr)/dezi.done:
	cd $(opencore-amr); \
	./configure; \
	make; \
	sudo make install; \
	touch dezi.done

opencore-amr: $(opencore-amr) $(opencore-amr)/dezi.done

#####################################################################
#
# vo-amrwbenc
#

$(vo-amrwbenc): 
	wget http://sourceforge.net/projects/opencore-amr/files/vo-amrwbenc/$(vo-amrwbenc).tar.gz
	tar -xvzf $(vo-amrwbenc).tar.gz
	mv -f $(vo-amrwbenc).tar.gz ../download

$(vo-amrwbenc)/dezi.done:
	cd $(vo-amrwbenc); \
	./configure; \
	make; \
	sudo make install; \
	touch dezi.done

vo-amrwbenc: $(vo-amrwbenc) $(vo-amrwbenc)/dezi.done

#####################################################################
#
# vo-aacenc
#

$(vo-aacenc): 
	wget http://sourceforge.net/projects/opencore-amr/files/vo-aacenc/$(vo-aacenc).tar.gz
	tar -xvzf $(vo-aacenc).tar.gz
	mv -f $(vo-aacenc).tar.gz ../download

$(vo-aacenc)/dezi.done:
	cd $(vo-aacenc); \
	./configure; \
	make; \
	sudo make install; \
	touch dezi.done

vo-aacenc: $(vo-aacenc) $(vo-aacenc)/dezi.done

#####################################################################
#
# orc => schroedinger
#

$(orc): 
	wget http://code.entropywave.com/download/orc/$(orc).tar.gz
	tar -xvzf $(orc).tar.gz
	mv -f $(orc).tar.gz ../download

$(orc)/dezi.done:
	cd $(orc); \
	./configure --enable-static --enable-shared; \
	make; \
	sudo make install; \
	touch dezi.done

orc: $(orc) $(orc)/dezi.done

#####################################################################
#
# schroedinger
#

$(schroedinger): 
	wget http://diracvideo.org/download/schroedinger/$(schroedinger).tar.gz
	tar -xvzf $(schroedinger).tar.gz
	mv -f $(schroedinger).tar.gz ../download

$(schroedinger)/dezi.done:
	cd $(schroedinger); \
	export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig"; \
	./configure --enable-static --enable-shared; \
	sed -i "s/testsuite//" makefile; \
	sed -i "s/-export-symbols-regex '^schro_'/-export-symbols-regex '^.*schro_'/" schroedinger/makefile; \
	sed -i "s/^int _schro_decode_prediction_only;/int _schro_decode_prediction_only = 0;/" schroedinger/schrodecoder.c; \
	sed -i "s/^int _schro_telemetry;/int _schro_telemetry = 0;/" schroedinger/schrodecoder.c; \
	make; \
	sudo make install; \
	touch dezi.done

schroedinger: $(schroedinger) $(schroedinger)/dezi.done

#####################################################################
#
# xavs
#

$(xavs):
	svn co https://xavs.svn.sourceforge.net/svnroot/xavs/trunk $(xavs)
	tar -cvzf $(xavs).tar.gz $(xavs)
	mv -f $(xavs).tar.gz ../download

$(xavs)/dezi.done:
	cd $(xavs); \
	./configure --enable-pic --disable-asm; \
	make; \
	sudo make install; \
	touch dezi.done

xavs: $(xavs) $(xavs)/dezi.done

#####################################################################
#
# utvideo
#

$(utvideo): 
	wget --no-check-certificate http://github.com/downloads/rdp/FFmpeg/$(utvideo)-src.zip -O $(utvideo).zip
	unzip $(utvideo).zip
	mv -f $(utvideo).zip ../download

$(utvideo)/dezi.done:
	cd $(utvideo); \
	sed -i 's/CXXFLAGS=/CXXFLAGS=-fPIC /g' GNUmakefile; \
	make; \
	sudo make install; \
	touch dezi.done

utvideo: $(utvideo) $(utvideo)/dezi.done

#####################################################################
#
# speex
#

$(speex): 
	wget http://downloads.xiph.org/releases/speex/$(speex).tar.gz
	tar -xvzf $(speex).tar.gz 
	mv -f $(speex).tar.gz ../download

$(speex)/dezi.done:
	cd $(speex); \
	./configure; \
	make; \
	sudo make install; \
	touch dezi.done

speex: $(speex) $(speex)/dezi.done

#####################################################################
#
# fdk-aac
#

$(fdk-aac): 
	git clone https://github.com/mstorsjo/fdk-aac.git $(fdk-aac)
	tar -cvzf $(fdk-aac).tar.gz $(fdk-aac)
	mv -f $(fdk-aac).tar.gz ../download

$(fdk-aac)/dezi.done:
	cd $(fdk-aac); \
	autoreconf -fiv; \
	./configure; \
	make; \
	sudo make install; \
	touch dezi.done

fdk-aac: $(fdk-aac) $(fdk-aac)/dezi.done

#####################################################################
#
# xvidcore
#

$(xvidcore): 
	wget http://downloads.xvid.org/downloads/$(xvidcore).tar.gz
	tar -xvzf $(xvidcore).tar.gz 
	mv xvidcore $(xvidcore) 
	mv -f $(xvidcore).tar.gz ../download

$(xvidcore)/dezi.done:
	cd $(xvidcore)/build/generic; \
	./configure; \
	make; \
	sudo make install; \
	cd ../..; \
	touch dezi.done

xvidcore: $(xvidcore) $(xvidcore)/dezi.done

#####################################################################
#
# libcdio-paranoia
#

$(libcdio-paranoia): 
	wget http://ftp.gnu.org/gnu/libcdio/$(libcdio-paranoia).tar.gz
	tar -xvzf $(libcdio-paranoia).tar.gz
	mv -f $(libcdio-paranoia).tar.gz ../download

$(libcdio-paranoia)/dezi.done:
	cd $(libcdio-paranoia); \
	export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig"; \
	./configure --without-versioned-libs; \
	make; \
	sudo make install; \
	touch dezi.done

libcdio-paranoia: $(libcdio-paranoia) $(libcdio-paranoia)/dezi.done

#####################################################################
#
# cd-discid
#

$(cd-discid): 
	git clone https://github.com/taem/cd-discid.git $(cd-discid)
	tar -cvzf $(cd-discid).tar.gz $(cd-discid)
	mv $(cd-discid).tar.gz ../download

$(cd-discid)/dezi.done:
	cd $(cd-discid); \
	make; \
	sudo make install; \
	touch dezi.done

cd-discid: $(cd-discid) $(cd-discid)/dezi.done

#####################################################################
#
# atomicparsley
#

$(atomicparsley):
	git clone https://github.com/beatgammit/atomicparsley.git $(atomicparsley)
	tar -cvzf $(atomicparsley).tar.gz $(atomicparsley)
	mv -f $(atomicparsley).tar.gz ../download

$(atomicparsley)/dezi.done:
	cd $(atomicparsley); \
	./autogen.sh; \
	./configure; \
	make; \
	sudo make install; \
	touch dezi.done

atomicparsley: $(atomicparsley) $(atomicparsley)/dezi.done

#####################################################################
#
# abcde
#

$(abcde): 
	wget http://abcde.googlecode.com/files/$(abcde).tar.gz
	tar -xvzf $(abcde).tar.gz
	mv -f $(abcde).tar.gz ../download

$(abcde)/dezi.done:
	cd $(abcde); \
	sed -i "s/DESTDIR}\/usr/DESTDIR}\/usr\/local/g" Makefile; \
	make; \
	sudo make install; \
	touch dezi.done

abcde: $(abcde) $(abcde)/dezi.done

#####################################################################
#
# mp4v2
#

$(mp4v2):
	svn co https://mp4v2.googlecode.com/svn/trunk $(mp4v2)
	tar -cvzf $(mp4v2).tar.gz  $(mp4v2)
	mv -f $(mp4v2).tar.gz ../download

$(mp4v2)/dezi.done:
	cd $(mp4v2); \
	autoreconf -fiv; \
	./configure; \
	make; \
	sudo make install; \
	touch dezi.done

mp4v2: $(mp4v2) $(mp4v2)/dezi.done

#####################################################################
#
# gpac
#

$(gpac):
	svn co https://gpac.svn.sourceforge.net/svnroot/gpac/trunk/gpac $(gpac)
	tar -cvzf $(gpac).tar.gz  $(gpac)
	mv -f $(gpac).tar.gz ../download

$(gpac)/dezi.configure:
	mkdir -p ../static;
	ln -sf /usr/local/lib/lib*.a ../static
	ln -sf /usr/local/lib64/lib*.a ../static
	ln -sf /usr/local/lib77/lib*.a ../static
	MYPWD=`pwd`; \
	cd $(gpac); \
	export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig"; \
	export PATH="/usr/bin:$$PATH"; \
	export LDFLAGS="-L$$MYPWD/../static -lm"; \
	./configure \
		--static-mp4box \
		--enable-pic \
		--enable-static-bin \
		|| exit; \
	touch dezi.configure

$(gpac)/dezi.done:
	cd $(gpac); \
	make || exit; \
	touch dezi.done

gpac: $(gpac) $(gpac)/dezi.configure $(gpac)/dezi.done

#####################################################################
#
# frei0r
#

$(frei0r): 
	wget http://www.piksel.no/frei0r/releases/frei0r-plugins-$(frei0r_version).tar.gz -O $(frei0r).tar.gz
	tar -xvzf $(frei0r).tar.gz
	mv -f $(frei0r).tar.gz ../download

$(frei0r)/dezi.done:
	cd $(frei0r); \
	./configure --enable-static --enable-shared; \
	make; \
	sudo make install; \
	touch dezi.done

frei0r: $(frei0r) $(frei0r)/dezi.done

#####################################################################
#
# v8
#

$(v8): 
	git clone git://github.com/v8/v8.git $(v8)
	tar -cvzf $(v8).tar.gz $(v8)
	mv -f $(v8).tar.gz ../download

$(v8)/dezi.done:
	cd $(v8); \
	ARCH=`arch`; \
	if [ -f "/usr/bin/gcc-4.7" ]; then \
		export CC=gcc-4.7; \
	fi; \
	make dependencies; \
	if test "$$ARCH" = "armv6l"; then \
		make hardfp=on vfp3=off arm || exit; \
	else \
		make ia32 || exit; \
	fi; \
	sudo make install; \
	touch dezi.done

v8: $(v8) $(v8)/dezi.done
